openapi: 3.0.3
info:
  title: Sportsbook Content Configurations Service
  description: "The following document describes the REST API that will be exposed by the Sportsbook Content Configurations service."
  version: 0.0.1
tags:
  - name: auth
    description: "Authentication endpoints"
  - name: catalogue
    description: "Catalogue related endpoints"
  - name: config
    description: "Configs related endpoints"
  - name: books
    description: "Books related endpoints"

paths:
########################### AUTH #######################################
  /sccs/auth/login:
    post:
      tags:
        - auth
      summary: "Login a user into the sportsbook-content-configurations service"
      description: "This method is used to login a user"
      security: []
      operationId: login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  $ref: "#/components/schemas/AuthorizedUsername"
                password:
                  $ref: "#/components/schemas/AuthorizedUserPassword"
      responses:
        200:
          description: "Response"
          headers:
            Set-Cookie:
              description: "Sets a session cookie"
              schema:
                $ref: "#/components/schemas/SCSSessionID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseOK"
              example:
                description: "Ok"
##################################################################
  /sccs/auth/logout:
    post:
      tags:
        - auth
      summary: "Logout a user from the sportsbook-content-configurations service"
      description: "This method is used to logout a user"
      operationId: logout
      responses:
        200:
          description: "OK. Sets session cookie (SCS_SESSION_ID) in response."
          headers:
            Set-Cookie:
              description: "Sets a session cookie"
              schema:
                $ref: "#/components/schemas/SCSSessionID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseOK"
              example:
                description: "Successfully logged out"
########################### CATALOGUE #######################################
  /sccs/catalog/entity/create:
    post:
      tags:
        - catalogue
      summary: "Creates a league, and the corresponding real sport and region if not existent"
      description: "This method is used to create a league"
      operationId: createLeague
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLeagueRequest"
      responses:
        200:
          description: "OK. League was created."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateLeagueResponse'
                  - $ref: '#/components/schemas/ResponseOK'
########################### CONFIG #######################################
  /sccs/config:
    post:
      tags:
        - config
      summary: Creates a new configuration
      operationId: createConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConfigRequest'
      responses:
        200:
          description: "OK. Config was created."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateConfigResponse'
                  - $ref: '#/components/schemas/ResponseOK'
  /sccs/config/{uuid}:
    post:
      tags:
        - config
      summary: Updates a configuration
      operationId: updateConfig
      parameters: 
        - name: uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfigRequest'
      responses:
        200:
          description: "OK. Configuration was updated."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UpdateConfigResponse'
                  - $ref: '#/components/schemas/ResponseOK'
                  
  /sccs/config/{uuid}/rename:
    post:
      tags:
        - config
      summary: Renames a configuration
      description: Rename, changes the configuration's name.
      operationId: renameConfig
      parameters: 
        - name: uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameConfigRequest'
      responses:
        200:
          description: "OK. Configuration was renamed."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RenameConfigResponse'
                  - $ref: '#/components/schemas/ResponseOK'

  /sccs/config/{uuid}/delete:
    post:
      tags:
        - config
      summary: Deletes a configuration
      description: Deletes a configuration permanently.
      operationId: deleteConfig
      parameters: 
        - name: uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteConfigRequest'
      responses:
        200:
          description: "OK. Configuration was deleted."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfigResponse'

  /sccs/config/{uuid}/duplicate:
    post:
      tags:
        - config
      summary: Duplicates a configuration
      description: |
        Duplicates a configuration. The category tree is duplicated, a new name is generated and returned in the response.
      operationId: duplicateConfig
      parameters: 
        - name: uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateConfigRequest'
      responses:
        200:
          description: "OK. Configuration duplicated."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DuplicateConfigResponse'
                  - $ref: '#/components/schemas/ResponseOK'
########################### BOOKS #######################################
  /sccs/books/assign:
    post:
      tags:
        - books
      summary: Assigns a config to books
      operationId: assignBooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignBooksRequest'
      responses:
        200:
          description: "OK. Books assigned."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AssignBooksResponse'
                  - $ref: '#/components/schemas/ResponseOK'
#Security
security:
  - sessionKey: []
  
# Components
components:
  securitySchemes:
    sessionKey:
      type: apiKey
      in: cookie
      name: SCS_SESSION_ID
  schemas:
########################### GENERAL #######################################
    StatusCode:
      type: integer
      enum:
        - 200
        - 400
        - 401
        - 403
        - 404
        - 409
        - 500 
        - 503
      x-enumNames:
        - "OK"
        - "BadRequest"
        - "Unauthorized"
        - "Forbidden"
        - "NotFound"
        - "Conflict"
        - "InternalServerError"
        - "ServiceUnavailable"
    ResponseOK:
      type: object
      required:
        - code
        - description
      properties:
        code:
          $ref: '#/components/schemas/StatusCode'
        description:
          type: string
          example: "Ok."
    UUID:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: gitlab.im.priv/integ/schedule/sportsbook-content-config-service/src/uuid
        name: uuid
      description: "Unique Identifier"
      example: "A65B6162-251D-4A3B-BBF4-13B7BD5DDFA8"
      
    Revision:
      type: string
      description: The object's revision
      minLength: 1
      example: "14-29ad1ec1a9a1246aa6106eea3c4e48b0"
########################### AUTH #######################################
    SCSSessionID:
      type: string
      minLength: 1
      description: "SessionID of a logged user"
      example: SCS_SESSION_ID=abcde12345; Path=/; HttpOnly

    AuthorizedUsername:
      type: string
      format: email
      minLength: 1
      description: "The domain username"
      example: "john.smith@im.priv"

    AuthorizedUserPassword:
      type: string
      description: "The domain password"
      example: "qwe@123!#"
########################### CATALOGUE #######################################      
    Region:
      type: object
      required: 
        - description
        - short
        - preGameDelay
        - liveDelay
        - enabled
      properties:
        description:
          minLength: 1
          type: string
        short:
          minLength: 1
          type: string
        preGameDelay:
          type: integer
        liveDelay:
          type: integer
        enabled:
          type: boolean
          
    ExistingRegion:
      type: object
      required:
        - uuid
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
    
    RealSport:
      type: object
      required: 
        - description
        - order
        - enabled
      properties:
        description:
          minLength: 1
          type: string
        order:
          type: integer
        enabled:
          type: boolean
          
    ExistingRealSport:
      type: object
      required:
        - uuid
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
    
    League:
      type: object
      required: 
        - sport
        - description
        - short
        - order
        - teamFkRequired
        - takeBackProfile
        - hideForMaster
        - enabled
      properties:
        sport:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        short:
          type: string
          minLength: 1
        order:
          type: integer
        teamFkRequired:
          type: boolean
        takebackProfile:
          type: integer
        hideForMaster:
          type: boolean
        enabled:
          type: boolean

    Entity:
      type: object
      required:
        - id
        - uuid
      properties:
        id:
          type: integer
        uuid:
          $ref: '#/components/schemas/UUID'

    ResponseEntities:
      type: object
      required:
        - region
        - realSport
        - league
      properties:
        region:
          $ref: '#/components/schemas/Entity'
        realSport:
          $ref: '#/components/schemas/Entity'
        league:
          $ref: '#/components/schemas/Entity'

    CreateLeagueRequest:
      type: object
      required: 
        - region
        - realSport
      properties:
        region:
          oneOf:
            - $ref: '#/components/schemas/Region'
            - $ref: '#/components/schemas/ExistingRegion'
        realSport:
          oneOf:
            - $ref: '#/components/schemas/RealSport'
            - $ref: '#/components/schemas/ExistingRealSport'
        league:
          $ref: '#/components/schemas/League'
          
    CreateLeagueResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          properties:
            entities: 
              $ref: '#/components/schemas/ResponseEntities'

          
########################### CONFIG #######################################
    FiltersTypeString:
      type: array
      uniqueItems: true
      items:
        type: string
        minLength: 1
      
    FiltersTypeBool:
      uniqueItems: true
      type: array
      items:
        type: boolean
      
    FiltersTypeInteger:
      uniqueItems: true
      type: array
      items:
        type: integer
        
    FilterType:
      type: string
      enum: 
        - sport
        - region
        - league
        - game
        - period
        - market
        - time
        - status
      x-enumNames:
        - "Sport"
        - "Region"
        - "League"
        - "Game"
        - "Period"
        - "Market"
        - "Time"
        - "Status"
    
    SportFilter:
      type: object
      required: [type, value]
      properties:
        type:
          type: string
          enum:
            - sport
          x-enumNames: 
            - "Sport"
        value:
          $ref: '#/components/schemas/FiltersTypeString'
          
    RegionFilter:
      type: object
      required: [type, value]
      properties:
        type:
          type: string
          enum:
            - region
          x-enumNames: 
            - "Region"
        value:
          $ref: '#/components/schemas/FiltersTypeString'
          
    LeagueFilter:
      type: object
      required: [type, value]
      properties:
        type:
          type: string
          enum:
            - league
          x-enumNames: 
            - "League"
        value:
          $ref: '#/components/schemas/FiltersTypeString'
    
    MyNewFilter:
      oneOf:
        - $ref: '#/components/schemas/SportFilter'
        - $ref: '#/components/schemas/RegionFilter'
        - $ref: '#/components/schemas/LeagueFilter'
      discriminator:
        propertyName: type
        mapping:
          sport: '#/components/schemas/SportFilter'
          region: '#/components/schemas/RegionFilter'
          league: '#/components/schemas/LeagueFilter'
      
    MyNewFilter2:
      type: object
      properties:
          sport:
            $ref: '#/components/schemas/SportFilter'
          region:
            $ref: '#/components/schemas/RegionFilter'
          league:
            $ref: '#/components/schemas/LeagueFilter'
      oneOf:
        - required: ['sport']
        - required: ['region']
        - required: ['league']
      additionalProperties: false

    Filter:
      type: object
      required:
        - type
        - value
      properties:
        type:
          $ref: '#/components/schemas/FilterType'
        value:
          oneOf:
            - $ref: '#/components/schemas/FiltersTypeString'
            - $ref: '#/components/schemas/FiltersTypeBool'
            - $ref: '#/components/schemas/FiltersTypeInteger'
          description: Values to filter by, can be a an array of objects of a single type.
          
    Filters:
      type: array
      items:
        $ref: '#/components/schemas/Filter'
        
    GroupType:
      type: string
      enum: 
        - leagueDay
        - dayLeague
        - sportDay
        - sportLeague
        - dayGame
      x-enumNames:
        - "ByLeagueByDay"
        - "ByDayByLeague"
        - "BySportByDay"
        - "BySportByLeague"
        - "ByDayByGame"
    
    OrderType:
      type: string
      enum: 
        - asc
        - desc
      x-enumNames:
        - "Asc"
        - "Desc"
        
    FilterGroup:
      type: object
      required:
          - filters
          - groupBy
          - order
          - limit
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        filters:
          $ref: '#/components/schemas/Filters'
        groupBy:
          $ref: '#/components/schemas/GroupType'
        order:
          $ref: '#/components/schemas/OrderType'
        limit:
          type: integer
          description: 0 means unlimited
          
    CategoryType:
      type: string
      enum: 
        - flat
        - nested
      x-enumNames:
            - "Flat"
            - "Nested"
        
    Category:
      type: object
      required:
        - name
        - type
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          minLength: 1
          description: Display name
        type:
          $ref: '#/components/schemas/CategoryType'
        filterGroups:
          type: array
          items:
            $ref: '#/components/schemas/FilterGroup'
        children:
          $ref: '#/components/schemas/Categories'
          
    Categories:
      type: array
      items:
        $ref: '#/components/schemas/Category'
            
    ConfigName:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          
    Config:
      type: object
      required:
        - uuid
        - _rev
        - name
        - categories
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        _rev:
          $ref: '#/components/schemas/Revision'
        name:
          type: string
          minLength: 1
        categories:
          $ref: '#/components/schemas/Categories'
## Requests
    CreateConfigRequest:
      $ref: '#/components/schemas/ConfigName'

    UpdateConfigRequest:
      $ref: '#/components/schemas/Config'

    DeleteConfigRequest:
      type: object
      required:
        - _rev
      properties:
        _rev:
          $ref: '#/components/schemas/Revision'

    RenameConfigRequest:
      type: object
      required:
        - _rev
      properties:
        _rev:
          $ref: '#/components/schemas/Revision'

    DuplicateConfigRequest:
      type: object
      required:
        - _rev
      properties:
        _rev:
          $ref: '#/components/schemas/Revision'

## Responses
    CreateConfigResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          required:
            - uuid
            - _rev
          properties:
            uuid:
              $ref: '#/components/schemas/UUID'
            _rev:
              $ref: '#/components/schemas/Revision'

    UpdateConfigResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          required:
            - _rev
          properties:
            _rev:
              $ref: '#/components/schemas/Revision'
    
    DeleteConfigResponse:
      $ref: '#/components/schemas/ResponseOK'
        
    RenameConfigResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          required:
            - _rev
          properties:
            _rev:
              $ref: '#/components/schemas/Revision'
      
    DuplicateConfigResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          required:
            - uuid
            - _rev
            - name
          properties:
            uuid:
              $ref: '#/components/schemas/UUID'
            _rev:
              $ref: '#/components/schemas/Revision'
            name:
              type: string
              minLength: 1
########################### BOOKS #######################################
    Book:
      type: object
      required:
        - id
        - config
        - _rev
      properties:
        id: 
          type: integer
        _rev:
          $ref: '#/components/schemas/Revision'
        config: 
          $ref: '#/components/schemas/UUID'

    Books:
      type: array
      items: 
        $ref: '#/components/schemas/Book'
        
    BookRev:
      type: object
      required:
        - id
        - _rev
      properties:
        id: 
          type: integer
        _rev:
          $ref: '#/components/schemas/Revision'
          
    BookRevs:
      type: array
      items:
        $ref: '#/components/schemas/BookRev'
        
## Requests
    AssignBooksRequest:
      $ref: '#/components/schemas/Books'
## Responses
    AssignBooksResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          properties:
            revs:
              $ref: '#/components/schemas/BookRevs'

