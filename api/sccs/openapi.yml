openapi: 3.0.3

info:
  title: Sportsbook Content Configurations Service
  description: "The following document describes the REST API that will be exposed by the Sportsbook Content Configurations service."
  version: 0.0.1

tags:
  - name: auth
    description: "Authentication endpoints"
  - name: catalogue
    description: "Catalogue related endpoints"
  - name: config
    description: "Configs related endpoints"

paths:
########################### AUTH #######################################
  /sccs/auth/login:
    post:
      tags:
        - auth
      summary: "Login a user into the sportsbook-content-configurations service"
      description: "This method is used to login a user"
      security: []
      operationId: login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  $ref: "#/components/schemas/AuthorizedUsername"
                password:
                  $ref: "#/components/schemas/AuthorizedUserPassword"
      responses:
        200:
          description: "Response"
          headers:
            Set-Cookie:
              description: "Sets a session cookie"
              schema:
                $ref: "#/components/schemas/SCSSessionID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseOK"
              example:
                description: "Ok"
##################################################################
  /sccs/auth/logout:
    post:
      tags:
        - auth
      summary: "Logout a user from the sportsbook-content-configurations service"
      description: "This method is used to logout a user"
      operationId: logout
      responses:
        200:
          description: "OK. Sets session cookie (SCS_SESSION_ID) in response."
          headers:
            Set-Cookie:
              description: "Sets a session cookie"
              schema:
                $ref: "#/components/schemas/SCSSessionID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseOK"
              example:
                description: "Successfully logged out"
########################### CATALOGUE #######################################
  /sccs/catalog/entity/create:
    post:
      tags:
        - catalogue
      summary: "Creates a league, and the corresponding real sport and region if not existent"
      description: "This method is used to create a league"
      operationId: createLeague
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLeagueRequest"
      responses:
        200:
          description: "OK. League was created."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateLeagueResponse'
                  - $ref: '#/components/schemas/ResponseOK'
########################### CONFIG #######################################
  /sccs/config:
    post:
      tags:
        - config
      summary: Creates a new configuration
      operationId: createConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConfigRequest'
      responses:
        200:
          description: "OK. Config was created."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateConfigResponse'
                  - $ref: '#/components/schemas/ResponseOK'
  /sccs/config/{uuid}:
    post:
      tags:
        - config
      summary: Updates a configuration
      operationId: updateConfig
      parameters: 
        - name: uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfigRequest'
      responses:
        200:
          description: "OK. Configuration was updated."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UpdateConfigResponse'
                  - $ref: '#/components/schemas/ResponseOK'
                  
  /sccs/config/{uuid}/rename:
    post:
      tags:
        - config
      summary: Renames a configuration
      description: Rename, changes the configuration's name.
      operationId: renameConfig
      parameters: 
        - name: uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameConfigRequest'
      responses:
        200:
          description: "OK. Configuration was renamed."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RenameConfigResponse'
                  - $ref: '#/components/schemas/ResponseOK'

  /sccs/config/{uuid}/delete:
    post:
      tags:
        - config
      summary: Deletes a configuration
      description: Deletes a configuration permanently.
      operationId: deleteConfig
      parameters: 
        - name: uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteConfigRequest'
      responses:
        200:
          description: "OK. Configuration was deleted."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteConfigResponse'

  /sccs/config/{uuid}/duplicate:
    post:
      tags:
        - config
      summary: Duplicates a configuration
      description: |
        Duplicates a configuration. The category tree is duplicated, a new name is generated and returned in the response.
      operationId: duplicateConfig
      parameters: 
        - name: uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateConfigRequest'
      responses:
        200:
          description: "OK. Configuration duplicated."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DuplicateConfigResponse'
                  - $ref: '#/components/schemas/ResponseOK'

  /sccs/config/{uuid}/assign:
    post:
      tags:
        - config
      summary: Assigns a config to books
      operationId: assignConfig
      parameters: 
        - name: uuid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignBooksRequest'
      responses:
        200:
          description: "OK. Books assigned."
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AssignBooksResponse'
                  - $ref: '#/components/schemas/ResponseOK'
########################### BOOKS #######################################
#Security
security:
  - sessionKey: []
  
# Components
components:
  securitySchemes:
    sessionKey:
      type: apiKey
      in: cookie
      name: SCS_SESSION_ID
  schemas:
########################### GENERAL #######################################
    StatusCode:
      type: integer
      enum:
        - 200
        - 400
        - 401
        - 403
        - 404
        - 409
        - 500 
        - 503
      x-enumNames:
        - "OK"
        - "BadRequest"
        - "Unauthorized"
        - "Forbidden"
        - "NotFound"
        - "Conflict"
        - "InternalServerError"
        - "ServiceUnavailable"
    ResponseOK:
      type: object
      required:
        - code
        - description
      properties:
        code:
          $ref: '#/components/schemas/StatusCode'
        description:
          type: string
          example: "Ok."
    UUID:
      type: string
      format: uuid
      x-go-type: uuid.UUID
      x-go-type-import:
        path: gitlab.im.priv/integ/schedule/sportsbook-content-config-service/src/uuid
        name: uuid
      description: "Unique Identifier"
      example: "A65B6162-251D-4A3B-BBF4-13B7BD5DDFA8"
      
    Revision:
      type: string
      description: The object's revision
      minLength: 1
      example: "14-29ad1ec1a9a1246aa6106eea3c4e48b0"
      
    UnixTimestamp:
      type: integer
      format: int64
      minimum: 0
      description: |
        A Unix timestamp representing the number of seconds since January 1, 1970 (UTC).
        This must be expressed in UTC and **must include milliseconds**.
      example: 1721217037123
      
    Username:
      type: string
      format: email
      minLength: 1
      description: "The domain username"
      example: "john.smith@im.priv"
########################### AUTH #######################################
    SCSSessionID:
      type: string
      minLength: 1
      description: "SessionID of a logged user"
      example: SCS_SESSION_ID=abcde12345; Path=/; HttpOnly

    AuthorizedUsername:
      $ref: '#/components/schemas/Username'

    AuthorizedUserPassword:
      type: string
      description: "The domain password"
      example: "qwe@123!#"
########################### CATALOGUE #######################################      
    Region:
      type: object
      required: 
        - description
        - order
        - enabled
      properties:
        description:
          minLength: 1
          type: string
        order:
          type: integer
        enabled:
          type: boolean
          
    ExistingRegion:
      type: object
      required:
        - uuid
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
    
    RealSport:
      type: object
      required: 
        - description
        - short
        - preGameDelay
        - liveDelay
        - order
        - enabled
      properties:
        description:
          minLength: 1
          type: string
        short:
          minLength: 1
          type: string
        preGameDelay:
          type: integer
        liveDelay:
          type: integer           
        enabled:
          type: boolean         
          
    ExistingRealSport:
      type: object
      required:
        - uuid
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
    
    League:
      type: object
      required: 
        - sport
        - description
        - short
        - order
        - teamFkRequired
        - takebackProfile
        - hideForMaster
        - enabled
      properties:
        sport:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        short:
          type: string
          minLength: 1
        order:
          type: integer
        teamFkRequired:
          type: boolean
        takebackProfile:
          type: integer
        hideForMaster:
          type: boolean
        enabled:
          type: boolean

    Entity:
      type: object
      required:
        - id
        - uuid
      properties:
        id:
          type: integer
        uuid:
          $ref: '#/components/schemas/UUID'

    ResponseEntities:
      type: object
      required:
        - region
        - realSport
        - league
      properties:
        region:
          $ref: '#/components/schemas/Entity'
        realSport:
          $ref: '#/components/schemas/Entity'
        league:
          $ref: '#/components/schemas/Entity'

    CreateLeagueRequest:
      type: object
      required: 
        - region
        - realSport
        - league
      properties:
        region:
          oneOf:
            - $ref: '#/components/schemas/Region'
            - $ref: '#/components/schemas/ExistingRegion'
        realSport:
          oneOf:
            - $ref: '#/components/schemas/RealSport'
            - $ref: '#/components/schemas/ExistingRealSport'
        league:
          $ref: '#/components/schemas/League'
          
    CreateLeagueResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          properties:
            entities: 
              $ref: '#/components/schemas/ResponseEntities'

          
########################### CONFIG #######################################
    FiltersTypeString:
      type: array
      uniqueItems: true
      items:
        type: string
        minLength: 1
      
    FiltersTypeBool:
      uniqueItems: true
      type: array
      items:
        type: boolean
      
    FiltersTypeInteger:
      uniqueItems: true
      type: array
      items:
        type: integer


       
    FilterType:
      oneOf:
        - $ref: '#/components/schemas/SportFilterType'
        - $ref: '#/components/schemas/RegionFilterType'
        - $ref: '#/components/schemas/LeagueFilterType'
        - $ref: '#/components/schemas/GameFilterType'
        - $ref: '#/components/schemas/PeriodFilterType'
        - $ref: '#/components/schemas/MarketFilterType'
        - $ref: '#/components/schemas/TimeFilterType'
        - $ref: '#/components/schemas/StatusFilterType'

    AllFilter:
      type: string
      enum: [all]
      x-enumNames: [All]
      
    SportFilterType:
      type: string
      enum: [sport]
      x-enumNames: [Sport]

    SportFilter:
      type: object
      required: [type, value]
      properties:
        type:
          $ref: '#/components/schemas/SportFilterType'
        value:
          oneOf:
            - $ref: '#/components/schemas/FiltersTypeString'
            - $ref: '#/components/schemas/AllFilter'

    RegionFilterType:
      type: string
      enum: [region]
      x-enumNames: [Region]

    RegionFilter:
      type: object
      required: [type, value]
      properties:
        type:
          $ref: '#/components/schemas/RegionFilterType'
        value:
          oneOf:
            - $ref: '#/components/schemas/FiltersTypeString'
            - $ref: '#/components/schemas/AllFilter'
          
    LeagueFilterType:
      type: string
      enum: [league]
      x-enumNames: [League]

    LeagueFilter:
      type: object
      required: [type, value]
      properties:
        type:
          $ref: '#/components/schemas/LeagueFilterType'
        value:
          oneOf:
            - $ref: '#/components/schemas/FiltersTypeString'
            - $ref: '#/components/schemas/AllFilter'

    MarketFilterType:
      type: string
      enum: [market]
      x-enumNames: [Market]

    MarketFilter:
      type: object
      required: [type, value]
      properties:
        type:
          $ref: '#/components/schemas/MarketFilterType'
        value:
          oneOf:
            - $ref: '#/components/schemas/FiltersTypeInteger'
            - $ref: '#/components/schemas/AllFilter'

    GameFilterType:
      type: string
      enum: [game]
      x-enumNames: [Game]

    GameFilter:
      type: object
      required: [type, value]
      properties:
        type:
          $ref: '#/components/schemas/GameFilterType'
        value:
          oneOf:
            - $ref: '#/components/schemas/FiltersTypeString'
            - $ref: '#/components/schemas/AllFilter'

    PeriodFilterType:
      type: string
      enum: [period]
      x-enumNames: [Period]

    PeriodFilter:
      type: object
      required: [type, value]
      properties:
        type:
          $ref: '#/components/schemas/PeriodFilterType'
        value:
          oneOf:
            - $ref: '#/components/schemas/FiltersTypeInteger'
            - $ref: '#/components/schemas/AllFilter'

    TimeFilterType:
      type: string
      enum: [time]
      x-enumNames: [Time]

    TimeFilter:
      type: object
      required: [type, value]
      properties:
        type:
          $ref: '#/components/schemas/TimeFilterType'
        value:
          oneOf:
            - type: integer
              description: "Number of hours"
            - $ref: '#/components/schemas/AllFilter'

    StatusFilterType:
      type: string
      enum: [status]
      x-enumNames: [Status]

    StatusFilter:
      type: object
      required: [type, value]
      properties:
        type:
          $ref: '#/components/schemas/StatusFilterType' 
        value:
          oneOf:
            - type: boolean
            - $ref: '#/components/schemas/AllFilter'

    Filter:
      oneOf:
        - $ref: '#/components/schemas/SportFilter'
        - $ref: '#/components/schemas/RegionFilter'
        - $ref: '#/components/schemas/LeagueFilter'
        - $ref: '#/components/schemas/GameFilter'
        - $ref: '#/components/schemas/PeriodFilter'
        - $ref: '#/components/schemas/MarketFilter'
        - $ref: '#/components/schemas/TimeFilter'
        - $ref: '#/components/schemas/StatusFilter'
      discriminator:
        propertyName: type
        mapping:
          sport: '#/components/schemas/SportFilter'
          region: '#/components/schemas/RegionFilter'
          league: '#/components/schemas/LeagueFilter'
          game: '#/components/schemas/GameFilter'
          period: '#/components/schemas/PeriodFilter'
          market: '#/components/schemas/MarketFilter'
          time: '#/components/schemas/TimeFilter'
          status: '#/components/schemas/StatusFilter'

    Filters:
      type: array
      items:
        $ref: '#/components/schemas/Filter'
        
    GroupType:
      type: array
      uniqueItems: true
      items:
        type: string
        minLength: 1
      description: "Possible values: leagueDay, dayLeague, sportDay, sportLeague, dayGame"

    
    OrderType:
      type: string
      enum: 
        - asc
        - desc
      x-enumNames:
        - "Asc"
        - "Desc"
        
    FilterGroup:
      type: object
      required:
        - uuid
        - filters
        - groupBy
        - order
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        filters:
          $ref: '#/components/schemas/Filters'
        groupBy:
          $ref: '#/components/schemas/GroupType'
        order:
          $ref: '#/components/schemas/OrderType'
        limit:
          type: integer
          description: 0 means unlimited
          
    CategoryType:
      type: string
      enum: 
        - flat
        - nested
      x-enumNames:
        - "Flat"
        - "Nested"

    Category:
      type: object
      required:
        - name
        - type
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          minLength: 1
          description: Display name
        type:
          $ref: '#/components/schemas/CategoryType'
        filterGroups:
          type: array
          items:
            $ref: '#/components/schemas/FilterGroup'
        children:
          $ref: '#/components/schemas/Categories'
          
    Categories:
      type: array
      items:
        $ref: '#/components/schemas/Category'
            
    ConfigName:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1

    ConfigMetadataValue:
      type: object
      required:
        - icon
      properties:
        icon:
          type: string
          minLength: 1
        sport:
          type: string
          minLength: 1

    ConfigMetadata:
      type: array
      items:
        $ref: '#/components/schemas/ConfigMetadataValue'
        

    BaseConfig:
      type: object
      required:
        - uuid
        - name
        - categories
        - metadata
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          minLength: 1
        categories:
          $ref: '#/components/schemas/Categories'
        metadata:
          $ref: '#/components/schemas/ConfigMetadata'
          description: "metadata and categories should be with the same length since they are matched by index"
          
    UpdateConfig:
      allOf:
        - $ref: '#/components/schemas/BaseConfig'
        - type: object
          required:
            - rev
          properties:
            rev:
              $ref: '#/components/schemas/Revision'
          
    StoredConfig:
      allOf:
        - $ref: '#/components/schemas/UpdateConfig'
        - type: object
          required:
            - lmt
            - lmu
          properties:
            lmt:
              $ref: '#/components/schemas/UnixTimestamp'
            lmu:
              $ref: '#/components/schemas/Username'
## Requests
    CreateConfigRequest:
      $ref: '#/components/schemas/ConfigName'

    UpdateConfigRequest:
      $ref: '#/components/schemas/UpdateConfig'

    DeleteConfigRequest:
      type: object
      required:
        - rev
      properties:
        rev:
          $ref: '#/components/schemas/Revision'

    RenameConfigRequest:
      type: object
      required:
        - rev
        - name
      properties:
        rev:
          $ref: '#/components/schemas/Revision'
        name: 
          type: string
          minLength: 1

    DuplicateConfigRequest:
      type: object
      required:
        - rev
        - name
      properties:
        rev:
          $ref: '#/components/schemas/Revision'
        name:
          type: string
          minLength: 1

## Responses
    CreateConfigResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          required:
            - uuid
          properties:
            uuid:
              $ref: '#/components/schemas/UUID'

    UpdateConfigResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          required:
            - rev
          properties:
            rev:
              $ref: '#/components/schemas/Revision'
    
    DeleteConfigResponse:
      $ref: '#/components/schemas/ResponseOK'
        
    RenameConfigResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          required:
            - rev
          properties:
            rev:
              $ref: '#/components/schemas/Revision'
      
    DuplicateConfigResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          required:
            - uuid
          properties:
            uuid:
              $ref: '#/components/schemas/UUID'
########################### BOOKS #######################################
    Book:
      type: object
      required:
        - id
        - config
      properties:
        id: 
          type: integer
        config: 
          $ref: '#/components/schemas/UUID'
          
    UpdateBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          required:
            - rev
          properties:
            rev:
                $ref: '#/components/schemas/Revision'

    StoredBook:
      allOf:
        - $ref: '#/components/schemas/UpdateBook'
        - type: object
          required:
            - lmt
            - lmu
          properties:
            lmt:
              $ref: '#/components/schemas/UnixTimestamp'
            lmu:
              $ref: '#/components/schemas/Username'  
    UpdateBooks:
      type: array
      items:
        $ref: '#/components/schemas/UpdateBook'

    Books:
      type: array
      items: 
        $ref: '#/components/schemas/StoredBook'
        
    BookRev:
      type: object
      required:
        - id
        - rev
      properties:
        id: 
          type: integer
        rev:
          $ref: '#/components/schemas/Revision'
          
    BookRevs:
      type: array
      items:
        $ref: '#/components/schemas/BookRev'
        
## Requests
    AssignBooksRequest:
      $ref: '#/components/schemas/BookRevs'
## Responses
    AssignBooksResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseOK'
        - type: object
          required:
            - revs
          properties:
            revs:
              $ref: '#/components/schemas/BookRevs'
