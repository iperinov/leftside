// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getConfigLeagueByEventById, getConfigLeaguesByEvents, getConfigLeagueById, getConfigLeagues, getConfigLeaguesTranslations, getConfigTakeBackProfileById, getConfigTakeBackProfiles, getConfigEvents, getConfigEventsTranslations, getConfigRealsports, getConfigRealsportsTranslations, getConfigPeriods, getConfigPlayerById, getConfigPlayerByAccountByNumber, getConfigTakeBackSettings, getConfigGameTypes, getConfigTeams, postConfigTeams, getConfigTeamsSearchByPattern, getConfigCashoutsRulesPerLeague, getConfigCashoutsRulesPerEvent, getConfigBooks, getConfigBanners, getConfigBannersTranslations, getConfigRegions, postSportEntities } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetConfigLeagueByEventByIdData, GetConfigLeaguesByEventsData, GetConfigLeagueByIdData, GetConfigLeaguesData, GetConfigLeaguesTranslationsData, GetConfigTakeBackProfileByIdData, GetConfigTakeBackProfilesData, GetConfigEventsData, GetConfigEventsTranslationsData, GetConfigRealsportsData, GetConfigRealsportsTranslationsData, GetConfigPeriodsData, GetConfigPlayerByIdData, GetConfigPlayerByAccountByNumberData, GetConfigTakeBackSettingsData, GetConfigGameTypesData, GetConfigTeamsData, PostConfigTeamsData, PostConfigTeamsError, PostConfigTeamsResponse, GetConfigTeamsSearchByPatternData, GetConfigCashoutsRulesPerLeagueData, GetConfigCashoutsRulesPerEventData, GetConfigBooksData, GetConfigBannersData, GetConfigBannersTranslationsData, GetConfigRegionsData, PostSportEntitiesData, PostSportEntitiesError, PostSportEntitiesResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getConfigLeagueByEventByIdQueryKey = (options: Options<GetConfigLeagueByEventByIdData>) => createQueryKey('getConfigLeagueByEventById', options);

/**
 * Get league by event
 * This method is used to get a league identifier mapped to a specific event.
 */
export const getConfigLeagueByEventByIdOptions = (options: Options<GetConfigLeagueByEventByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigLeagueByEventById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigLeagueByEventByIdQueryKey(options)
    });
};

export const getConfigLeaguesByEventsQueryKey = (options?: Options<GetConfigLeaguesByEventsData>) => createQueryKey('getConfigLeaguesByEvents', options);

/**
 * Get leagues listed per event
 * This method is used to get a list of leagues mapped to events.
 */
export const getConfigLeaguesByEventsOptions = (options?: Options<GetConfigLeaguesByEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigLeaguesByEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigLeaguesByEventsQueryKey(options)
    });
};

export const getConfigLeagueByIdQueryKey = (options: Options<GetConfigLeagueByIdData>) => createQueryKey('getConfigLeagueById', options);

/**
 * Get league configuration
 * This method is used to get an information for a specific league.
 */
export const getConfigLeagueByIdOptions = (options: Options<GetConfigLeagueByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigLeagueById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigLeagueByIdQueryKey(options)
    });
};

export const getConfigLeaguesQueryKey = (options?: Options<GetConfigLeaguesData>) => createQueryKey('getConfigLeagues', options);

/**
 * Get leagues configuration
 * This method is used to get a list of league configurations.
 */
export const getConfigLeaguesOptions = (options?: Options<GetConfigLeaguesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigLeagues({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigLeaguesQueryKey(options)
    });
};

export const getConfigLeaguesTranslationsQueryKey = (options?: Options<GetConfigLeaguesTranslationsData>) => createQueryKey('getConfigLeaguesTranslations', options);

/**
 * Get translations for leagues
 * Returns translated descriptions for leagues, optionally filtered by league IDs.
 */
export const getConfigLeaguesTranslationsOptions = (options?: Options<GetConfigLeaguesTranslationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigLeaguesTranslations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigLeaguesTranslationsQueryKey(options)
    });
};

export const getConfigTakeBackProfileByIdQueryKey = (options: Options<GetConfigTakeBackProfileByIdData>) => createQueryKey('getConfigTakeBackProfileById', options);

/**
 * Get a take-back profile configuration
 * This method is used to get a specific take-back profile configuration.
 */
export const getConfigTakeBackProfileByIdOptions = (options: Options<GetConfigTakeBackProfileByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigTakeBackProfileById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigTakeBackProfileByIdQueryKey(options)
    });
};

export const getConfigTakeBackProfilesQueryKey = (options?: Options<GetConfigTakeBackProfilesData>) => createQueryKey('getConfigTakeBackProfiles', options);

/**
 * Get a list of all take-back profiles
 * This method is used to get the configurations of all available take-back profiles.
 */
export const getConfigTakeBackProfilesOptions = (options?: Options<GetConfigTakeBackProfilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigTakeBackProfiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigTakeBackProfilesQueryKey(options)
    });
};

export const getConfigEventsQueryKey = (options?: Options<GetConfigEventsData>) => createQueryKey('getConfigEvents', options);

/**
 * Get Events configuration
 * This method is used to get a list of Events configurations.
 */
export const getConfigEventsOptions = (options?: Options<GetConfigEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigEventsQueryKey(options)
    });
};

export const getConfigEventsTranslationsQueryKey = (options?: Options<GetConfigEventsTranslationsData>) => createQueryKey('getConfigEventsTranslations', options);

/**
 * Get translations for events
 * Returns translated descriptions for events, optionally filtered by event IDs.
 */
export const getConfigEventsTranslationsOptions = (options?: Options<GetConfigEventsTranslationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigEventsTranslations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigEventsTranslationsQueryKey(options)
    });
};

export const getConfigRealsportsQueryKey = (options?: Options<GetConfigRealsportsData>) => createQueryKey('getConfigRealsports', options);

/**
 * Get a list of all real sports
 * This method is used to get all the real sports available in the system
 */
export const getConfigRealsportsOptions = (options?: Options<GetConfigRealsportsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigRealsports({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigRealsportsQueryKey(options)
    });
};

export const getConfigRealsportsTranslationsQueryKey = (options?: Options<GetConfigRealsportsTranslationsData>) => createQueryKey('getConfigRealsportsTranslations', options);

/**
 * Get translations for real sports
 * Returns translated descriptions for real sports by optional list of rsid values.
 */
export const getConfigRealsportsTranslationsOptions = (options?: Options<GetConfigRealsportsTranslationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigRealsportsTranslations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigRealsportsTranslationsQueryKey(options)
    });
};

export const getConfigPeriodsQueryKey = (options?: Options<GetConfigPeriodsData>) => createQueryKey('getConfigPeriods', options);

/**
 * Get Periods configuration
 * This method is used to get a list of Periods configurations.
 */
export const getConfigPeriodsOptions = (options?: Options<GetConfigPeriodsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigPeriods({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigPeriodsQueryKey(options)
    });
};

export const getConfigPlayerByIdQueryKey = (options: Options<GetConfigPlayerByIdData>) => createQueryKey('getConfigPlayerById', options);

/**
 * Get player information
 * This method is used to get an information about a player registered in the system
 */
export const getConfigPlayerByIdOptions = (options: Options<GetConfigPlayerByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigPlayerById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigPlayerByIdQueryKey(options)
    });
};

export const getConfigPlayerByAccountByNumberQueryKey = (options: Options<GetConfigPlayerByAccountByNumberData>) => createQueryKey('getConfigPlayerByAccountByNumber', options);

/**
 * Get player information by account number
 * This method is used to get an information about a player registered in the system
 */
export const getConfigPlayerByAccountByNumberOptions = (options: Options<GetConfigPlayerByAccountByNumberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigPlayerByAccountByNumber({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigPlayerByAccountByNumberQueryKey(options)
    });
};

export const getConfigTakeBackSettingsQueryKey = (options?: Options<GetConfigTakeBackSettingsData>) => createQueryKey('getConfigTakeBackSettings', options);

/**
 * Get TakeBack Settings configuration
 * This method is used to get a list of TakeBack Settings configurations.
 */
export const getConfigTakeBackSettingsOptions = (options?: Options<GetConfigTakeBackSettingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigTakeBackSettings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigTakeBackSettingsQueryKey(options)
    });
};

export const getConfigGameTypesQueryKey = (options?: Options<GetConfigGameTypesData>) => createQueryKey('getConfigGameTypes', options);

/**
 * Get Game Type configuration
 * This method is used to get a list of Game Type configurations.
 */
export const getConfigGameTypesOptions = (options?: Options<GetConfigGameTypesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigGameTypes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigGameTypesQueryKey(options)
    });
};

export const getConfigTeamsQueryKey = (options: Options<GetConfigTeamsData>) => createQueryKey('getConfigTeams', options);

/**
 * Get a list of teams
 * Get a list of teams. Optionally can provide only the teams whose IDs are added as parametes in the request
 */
export const getConfigTeamsOptions = (options: Options<GetConfigTeamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigTeams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigTeamsQueryKey(options)
    });
};

export const postConfigTeamsQueryKey = (options: Options<PostConfigTeamsData>) => createQueryKey('postConfigTeams', options);

/**
 * storing a list of ORO teams.
 * The method will accept a JSON will an array of teams.
 */
export const postConfigTeamsOptions = (options: Options<PostConfigTeamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postConfigTeams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postConfigTeamsQueryKey(options)
    });
};

/**
 * storing a list of ORO teams.
 * The method will accept a JSON will an array of teams.
 */
export const postConfigTeamsMutation = (options?: Partial<Options<PostConfigTeamsData>>): UseMutationOptions<PostConfigTeamsResponse, PostConfigTeamsError, Options<PostConfigTeamsData>> => {
    const mutationOptions: UseMutationOptions<PostConfigTeamsResponse, PostConfigTeamsError, Options<PostConfigTeamsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postConfigTeams({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getConfigTeamsSearchByPatternQueryKey = (options: Options<GetConfigTeamsSearchByPatternData>) => createQueryKey('getConfigTeamsSearchByPattern', options);

/**
 * Get a list of teams that match a condition
 * Get a list of teams whose names start with the specified pattern. The search is case insensitive and pattern must contain at least 3 symbols
 */
export const getConfigTeamsSearchByPatternOptions = (options: Options<GetConfigTeamsSearchByPatternData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigTeamsSearchByPattern({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigTeamsSearchByPatternQueryKey(options)
    });
};

export const getConfigCashoutsRulesPerLeagueQueryKey = (options?: Options<GetConfigCashoutsRulesPerLeagueData>) => createQueryKey('getConfigCashoutsRulesPerLeague', options);

/**
 * Get Cashout Rules per League
 * This method is used to get a list of Cashout Rules per League. Optionally can provide a league id
 */
export const getConfigCashoutsRulesPerLeagueOptions = (options?: Options<GetConfigCashoutsRulesPerLeagueData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigCashoutsRulesPerLeague({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigCashoutsRulesPerLeagueQueryKey(options)
    });
};

export const getConfigCashoutsRulesPerEventQueryKey = (options?: Options<GetConfigCashoutsRulesPerEventData>) => createQueryKey('getConfigCashoutsRulesPerEvent', options);

/**
 * Get Cashout Rules per Event
 * This method is used to get a list of Cashout Rules per Event. Optionally can provide a Event id
 */
export const getConfigCashoutsRulesPerEventOptions = (options?: Options<GetConfigCashoutsRulesPerEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigCashoutsRulesPerEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigCashoutsRulesPerEventQueryKey(options)
    });
};

export const getConfigBooksQueryKey = (options?: Options<GetConfigBooksData>) => createQueryKey('getConfigBooks', options);

/**
 * Get Books
 * This method is used to get a list of books. Optionally a list of books ids can be provided to filter the result
 */
export const getConfigBooksOptions = (options?: Options<GetConfigBooksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigBooks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigBooksQueryKey(options)
    });
};

export const getConfigBannersQueryKey = (options?: Options<GetConfigBannersData>) => createQueryKey('getConfigBanners', options);

/**
 * Get Banners
 * This method is used to get a list of banners. Optionally a list of banner uuids can be provided to filter the result
 */
export const getConfigBannersOptions = (options?: Options<GetConfigBannersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigBanners({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigBannersQueryKey(options)
    });
};

export const getConfigBannersTranslationsQueryKey = (options?: Options<GetConfigBannersTranslationsData>) => createQueryKey('getConfigBannersTranslations', options);

/**
 * Get translations for banners
 * Returns translated descriptions for banners by optional list of banner id values.
 */
export const getConfigBannersTranslationsOptions = (options?: Options<GetConfigBannersTranslationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigBannersTranslations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigBannersTranslationsQueryKey(options)
    });
};

export const getConfigRegionsQueryKey = (options?: Options<GetConfigRegionsData>) => createQueryKey('getConfigRegions', options);

/**
 * Get League Regions
 * This method is used to get a list of available league regions. Optionally a list of league region uuids can be provided to filter the result
 */
export const getConfigRegionsOptions = (options?: Options<GetConfigRegionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigRegions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigRegionsQueryKey(options)
    });
};

export const postSportEntitiesQueryKey = (options: Options<PostSportEntitiesData>) => createQueryKey('postSportEntities', options);

/**
 * Create real-sport, region, and league entities
 */
export const postSportEntitiesOptions = (options: Options<PostSportEntitiesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postSportEntities({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postSportEntitiesQueryKey(options)
    });
};

/**
 * Create real-sport, region, and league entities
 */
export const postSportEntitiesMutation = (options?: Partial<Options<PostSportEntitiesData>>): UseMutationOptions<PostSportEntitiesResponse, PostSportEntitiesError, Options<PostSportEntitiesData>> => {
    const mutationOptions: UseMutationOptions<PostSportEntitiesResponse, PostSportEntitiesError, Options<PostSportEntitiesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postSportEntities({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};