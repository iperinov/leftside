// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetConfigLeagueByEventByIdData, GetConfigLeagueByEventByIdResponses, GetConfigLeagueByEventByIdErrors, GetConfigLeaguesByEventsData, GetConfigLeaguesByEventsResponses, GetConfigLeaguesByEventsErrors, GetConfigLeagueByIdData, GetConfigLeagueByIdResponses, GetConfigLeagueByIdErrors, GetConfigLeaguesData, GetConfigLeaguesResponses, GetConfigLeaguesErrors, GetConfigLeaguesTranslationsData, GetConfigLeaguesTranslationsResponses, GetConfigLeaguesTranslationsErrors, GetConfigTakeBackProfileByIdData, GetConfigTakeBackProfileByIdResponses, GetConfigTakeBackProfileByIdErrors, GetConfigTakeBackProfilesData, GetConfigTakeBackProfilesResponses, GetConfigTakeBackProfilesErrors, GetConfigEventsData, GetConfigEventsResponses, GetConfigEventsErrors, GetConfigEventsTranslationsData, GetConfigEventsTranslationsResponses, GetConfigEventsTranslationsErrors, GetConfigRealsportsData, GetConfigRealsportsResponses, GetConfigRealsportsErrors, GetConfigRealsportsTranslationsData, GetConfigRealsportsTranslationsResponses, GetConfigRealsportsTranslationsErrors, GetConfigPeriodsData, GetConfigPeriodsResponses, GetConfigPeriodsErrors, GetConfigPlayerByIdData, GetConfigPlayerByIdResponses, GetConfigPlayerByIdErrors, GetConfigPlayerByAccountByNumberData, GetConfigPlayerByAccountByNumberResponses, GetConfigPlayerByAccountByNumberErrors, GetConfigTakeBackSettingsData, GetConfigTakeBackSettingsResponses, GetConfigTakeBackSettingsErrors, GetConfigGameTypesData, GetConfigGameTypesResponses, GetConfigGameTypesErrors, GetConfigTeamsData, GetConfigTeamsResponses, GetConfigTeamsErrors, PostConfigTeamsData, PostConfigTeamsResponses, PostConfigTeamsErrors, GetConfigTeamsSearchByPatternData, GetConfigTeamsSearchByPatternResponses, GetConfigTeamsSearchByPatternErrors, GetConfigCashoutsRulesPerLeagueData, GetConfigCashoutsRulesPerLeagueResponses, GetConfigCashoutsRulesPerLeagueErrors, GetConfigCashoutsRulesPerEventData, GetConfigCashoutsRulesPerEventResponses, GetConfigCashoutsRulesPerEventErrors, GetConfigBooksData, GetConfigBooksResponses, GetConfigBooksErrors, GetConfigBannersData, GetConfigBannersResponses, GetConfigBannersErrors, GetConfigBannersTranslationsData, GetConfigBannersTranslationsResponses, GetConfigBannersTranslationsErrors, GetConfigRegionsData, GetConfigRegionsResponses, GetConfigRegionsErrors, PostSportEntitiesData, PostSportEntitiesResponses, PostSportEntitiesErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get league by event
 * This method is used to get a league identifier mapped to a specific event.
 */
export const getConfigLeagueByEventById = <ThrowOnError extends boolean = false>(options: Options<GetConfigLeagueByEventByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConfigLeagueByEventByIdResponses, GetConfigLeagueByEventByIdErrors, ThrowOnError>({
        url: '/config/league-by-event/{id}',
        ...options
    });
};

/**
 * Get leagues listed per event
 * This method is used to get a list of leagues mapped to events.
 */
export const getConfigLeaguesByEvents = <ThrowOnError extends boolean = false>(options?: Options<GetConfigLeaguesByEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigLeaguesByEventsResponses, GetConfigLeaguesByEventsErrors, ThrowOnError>({
        url: '/config/leagues-by-events/',
        ...options
    });
};

/**
 * Get league configuration
 * This method is used to get an information for a specific league.
 */
export const getConfigLeagueById = <ThrowOnError extends boolean = false>(options: Options<GetConfigLeagueByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConfigLeagueByIdResponses, GetConfigLeagueByIdErrors, ThrowOnError>({
        url: '/config/league/{id}',
        ...options
    });
};

/**
 * Get leagues configuration
 * This method is used to get a list of league configurations.
 */
export const getConfigLeagues = <ThrowOnError extends boolean = false>(options?: Options<GetConfigLeaguesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigLeaguesResponses, GetConfigLeaguesErrors, ThrowOnError>({
        url: '/config/leagues/',
        ...options
    });
};

/**
 * Get translations for leagues
 * Returns translated descriptions for leagues, optionally filtered by league IDs.
 */
export const getConfigLeaguesTranslations = <ThrowOnError extends boolean = false>(options?: Options<GetConfigLeaguesTranslationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigLeaguesTranslationsResponses, GetConfigLeaguesTranslationsErrors, ThrowOnError>({
        url: '/config/leagues/translations/',
        ...options
    });
};

/**
 * Get a take-back profile configuration
 * This method is used to get a specific take-back profile configuration.
 */
export const getConfigTakeBackProfileById = <ThrowOnError extends boolean = false>(options: Options<GetConfigTakeBackProfileByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConfigTakeBackProfileByIdResponses, GetConfigTakeBackProfileByIdErrors, ThrowOnError>({
        url: '/config/take-back-profile/{id}',
        ...options
    });
};

/**
 * Get a list of all take-back profiles
 * This method is used to get the configurations of all available take-back profiles.
 */
export const getConfigTakeBackProfiles = <ThrowOnError extends boolean = false>(options?: Options<GetConfigTakeBackProfilesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigTakeBackProfilesResponses, GetConfigTakeBackProfilesErrors, ThrowOnError>({
        url: '/config/take-back-profiles/',
        ...options
    });
};

/**
 * Get Events configuration
 * This method is used to get a list of Events configurations.
 */
export const getConfigEvents = <ThrowOnError extends boolean = false>(options?: Options<GetConfigEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigEventsResponses, GetConfigEventsErrors, ThrowOnError>({
        url: '/config/events/',
        ...options
    });
};

/**
 * Get translations for events
 * Returns translated descriptions for events, optionally filtered by event IDs.
 */
export const getConfigEventsTranslations = <ThrowOnError extends boolean = false>(options?: Options<GetConfigEventsTranslationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigEventsTranslationsResponses, GetConfigEventsTranslationsErrors, ThrowOnError>({
        url: '/config/events/translations/',
        ...options
    });
};

/**
 * Get a list of all real sports
 * This method is used to get all the real sports available in the system
 */
export const getConfigRealsports = <ThrowOnError extends boolean = false>(options?: Options<GetConfigRealsportsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigRealsportsResponses, GetConfigRealsportsErrors, ThrowOnError>({
        url: '/config/realsports/',
        ...options
    });
};

/**
 * Get translations for real sports
 * Returns translated descriptions for real sports by optional list of rsid values.
 */
export const getConfigRealsportsTranslations = <ThrowOnError extends boolean = false>(options?: Options<GetConfigRealsportsTranslationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigRealsportsTranslationsResponses, GetConfigRealsportsTranslationsErrors, ThrowOnError>({
        url: '/config/realsports/translations/',
        ...options
    });
};

/**
 * Get Periods configuration
 * This method is used to get a list of Periods configurations.
 */
export const getConfigPeriods = <ThrowOnError extends boolean = false>(options?: Options<GetConfigPeriodsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigPeriodsResponses, GetConfigPeriodsErrors, ThrowOnError>({
        url: '/config/periods/',
        ...options
    });
};

/**
 * Get player information
 * This method is used to get an information about a player registered in the system
 */
export const getConfigPlayerById = <ThrowOnError extends boolean = false>(options: Options<GetConfigPlayerByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConfigPlayerByIdResponses, GetConfigPlayerByIdErrors, ThrowOnError>({
        url: '/config/player/{id}',
        ...options
    });
};

/**
 * Get player information by account number
 * This method is used to get an information about a player registered in the system
 */
export const getConfigPlayerByAccountByNumber = <ThrowOnError extends boolean = false>(options: Options<GetConfigPlayerByAccountByNumberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConfigPlayerByAccountByNumberResponses, GetConfigPlayerByAccountByNumberErrors, ThrowOnError>({
        url: '/config/player/by-account/{number}',
        ...options
    });
};

/**
 * Get TakeBack Settings configuration
 * This method is used to get a list of TakeBack Settings configurations.
 */
export const getConfigTakeBackSettings = <ThrowOnError extends boolean = false>(options?: Options<GetConfigTakeBackSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigTakeBackSettingsResponses, GetConfigTakeBackSettingsErrors, ThrowOnError>({
        url: '/config/take-back-settings/',
        ...options
    });
};

/**
 * Get Game Type configuration
 * This method is used to get a list of Game Type configurations.
 */
export const getConfigGameTypes = <ThrowOnError extends boolean = false>(options?: Options<GetConfigGameTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigGameTypesResponses, GetConfigGameTypesErrors, ThrowOnError>({
        url: '/config/game-types/',
        ...options
    });
};

/**
 * Get a list of teams
 * Get a list of teams. Optionally can provide only the teams whose IDs are added as parametes in the request
 */
export const getConfigTeams = <ThrowOnError extends boolean = false>(options: Options<GetConfigTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConfigTeamsResponses, GetConfigTeamsErrors, ThrowOnError>({
        url: '/config/teams/',
        ...options
    });
};

/**
 * storing a list of ORO teams.
 * The method will accept a JSON will an array of teams.
 */
export const postConfigTeams = <ThrowOnError extends boolean = false>(options: Options<PostConfigTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostConfigTeamsResponses, PostConfigTeamsErrors, ThrowOnError>({
        url: '/config/teams/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a list of teams that match a condition
 * Get a list of teams whose names start with the specified pattern. The search is case insensitive and pattern must contain at least 3 symbols
 */
export const getConfigTeamsSearchByPattern = <ThrowOnError extends boolean = false>(options: Options<GetConfigTeamsSearchByPatternData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConfigTeamsSearchByPatternResponses, GetConfigTeamsSearchByPatternErrors, ThrowOnError>({
        url: '/config/teams/search/{pattern}',
        ...options
    });
};

/**
 * Get Cashout Rules per League
 * This method is used to get a list of Cashout Rules per League. Optionally can provide a league id
 */
export const getConfigCashoutsRulesPerLeague = <ThrowOnError extends boolean = false>(options?: Options<GetConfigCashoutsRulesPerLeagueData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigCashoutsRulesPerLeagueResponses, GetConfigCashoutsRulesPerLeagueErrors, ThrowOnError>({
        url: '/config/cashouts-rules-per-league',
        ...options
    });
};

/**
 * Get Cashout Rules per Event
 * This method is used to get a list of Cashout Rules per Event. Optionally can provide a Event id
 */
export const getConfigCashoutsRulesPerEvent = <ThrowOnError extends boolean = false>(options?: Options<GetConfigCashoutsRulesPerEventData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigCashoutsRulesPerEventResponses, GetConfigCashoutsRulesPerEventErrors, ThrowOnError>({
        url: '/config/cashouts-rules-per-event',
        ...options
    });
};

/**
 * Get Books
 * This method is used to get a list of books. Optionally a list of books ids can be provided to filter the result
 */
export const getConfigBooks = <ThrowOnError extends boolean = false>(options?: Options<GetConfigBooksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigBooksResponses, GetConfigBooksErrors, ThrowOnError>({
        url: '/config/books/',
        ...options
    });
};

/**
 * Get Banners
 * This method is used to get a list of banners. Optionally a list of banner uuids can be provided to filter the result
 */
export const getConfigBanners = <ThrowOnError extends boolean = false>(options?: Options<GetConfigBannersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigBannersResponses, GetConfigBannersErrors, ThrowOnError>({
        url: '/config/banners/',
        ...options
    });
};

/**
 * Get translations for banners
 * Returns translated descriptions for banners by optional list of banner id values.
 */
export const getConfigBannersTranslations = <ThrowOnError extends boolean = false>(options?: Options<GetConfigBannersTranslationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigBannersTranslationsResponses, GetConfigBannersTranslationsErrors, ThrowOnError>({
        url: '/config/banners/translations/',
        ...options
    });
};

/**
 * Get League Regions
 * This method is used to get a list of available league regions. Optionally a list of league region uuids can be provided to filter the result
 */
export const getConfigRegions = <ThrowOnError extends boolean = false>(options?: Options<GetConfigRegionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigRegionsResponses, GetConfigRegionsErrors, ThrowOnError>({
        url: '/config/regions/',
        ...options
    });
};

/**
 * Create real-sport, region, and league entities
 */
export const postSportEntities = <ThrowOnError extends boolean = false>(options: Options<PostSportEntitiesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSportEntitiesResponses, PostSportEntitiesErrors, ThrowOnError>({
        url: '/sport/entities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};