// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, type UseMutationOptions, queryOptions } from "@tanstack/react-query";
import { client as _heyApiClient } from "../client.gen";
import { type Options, assignBooks, createConfig, createLeague, deleteConfig, duplicateConfig, login, logout, renameConfig, updateConfig } from "../sdk.gen";
import type {
  AssignBooksData,
  AssignBooksResponse2,
  CreateConfigData,
  CreateConfigResponse2,
  CreateLeagueData,
  CreateLeagueResponse2,
  DeleteConfigData,
  DeleteConfigResponse2,
  DuplicateConfigData,
  DuplicateConfigResponse2,
  LoginData,
  LoginResponse,
  LogoutData,
  LogoutResponse,
  RenameConfigData,
  RenameConfigResponse2,
  UpdateConfigData,
  UpdateConfigResponse2,
} from "../types.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const loginQueryKey = (options: Options<LoginData>) => createQueryKey("login", options);

/**
 * Login a user into the sportsbook-content-configurations service
 * This method is used to login a user
 */
export const loginOptions = (options: Options<LoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await login({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginQueryKey(options),
  });
};

/**
 * Login a user into the sportsbook-content-configurations service
 * This method is used to login a user
 */
export const loginMutation = (options?: Partial<Options<LoginData>>): UseMutationOptions<LoginResponse, DefaultError, Options<LoginData>> => {
  const mutationOptions: UseMutationOptions<LoginResponse, DefaultError, Options<LoginData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await login({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const logoutQueryKey = (options?: Options<LogoutData>) => createQueryKey("logout", options);

/**
 * Logout a user from the sportsbook-content-configurations service
 * This method is used to logout a user
 */
export const logoutOptions = (options?: Options<LogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await logout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: logoutQueryKey(options),
  });
};

/**
 * Logout a user from the sportsbook-content-configurations service
 * This method is used to logout a user
 */
export const logoutMutation = (options?: Partial<Options<LogoutData>>): UseMutationOptions<LogoutResponse, DefaultError, Options<LogoutData>> => {
  const mutationOptions: UseMutationOptions<LogoutResponse, DefaultError, Options<LogoutData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await logout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createLeagueQueryKey = (options: Options<CreateLeagueData>) => createQueryKey("createLeague", options);

/**
 * Creates a league, and the corresponding real sport and region if not existent
 * This method is used to create a league
 */
export const createLeagueOptions = (options: Options<CreateLeagueData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createLeague({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createLeagueQueryKey(options),
  });
};

/**
 * Creates a league, and the corresponding real sport and region if not existent
 * This method is used to create a league
 */
export const createLeagueMutation = (
  options?: Partial<Options<CreateLeagueData>>,
): UseMutationOptions<CreateLeagueResponse2, DefaultError, Options<CreateLeagueData>> => {
  const mutationOptions: UseMutationOptions<CreateLeagueResponse2, DefaultError, Options<CreateLeagueData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createLeague({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createConfigQueryKey = (options: Options<CreateConfigData>) => createQueryKey("createConfig", options);

/**
 * Creates a new configuration
 */
export const createConfigOptions = (options: Options<CreateConfigData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createConfigQueryKey(options),
  });
};

/**
 * Creates a new configuration
 */
export const createConfigMutation = (
  options?: Partial<Options<CreateConfigData>>,
): UseMutationOptions<CreateConfigResponse2, DefaultError, Options<CreateConfigData>> => {
  const mutationOptions: UseMutationOptions<CreateConfigResponse2, DefaultError, Options<CreateConfigData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await createConfig({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateConfigQueryKey = (options: Options<UpdateConfigData>) => createQueryKey("updateConfig", options);

/**
 * Updates a configuration
 */
export const updateConfigOptions = (options: Options<UpdateConfigData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await updateConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: updateConfigQueryKey(options),
  });
};

/**
 * Updates a configuration
 */
export const updateConfigMutation = (
  options?: Partial<Options<UpdateConfigData>>,
): UseMutationOptions<UpdateConfigResponse2, DefaultError, Options<UpdateConfigData>> => {
  const mutationOptions: UseMutationOptions<UpdateConfigResponse2, DefaultError, Options<UpdateConfigData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await updateConfig({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const renameConfigQueryKey = (options: Options<RenameConfigData>) => createQueryKey("renameConfig", options);

/**
 * Renames a configuration
 * Rename, changes the configuration's name.
 */
export const renameConfigOptions = (options: Options<RenameConfigData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await renameConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: renameConfigQueryKey(options),
  });
};

/**
 * Renames a configuration
 * Rename, changes the configuration's name.
 */
export const renameConfigMutation = (
  options?: Partial<Options<RenameConfigData>>,
): UseMutationOptions<RenameConfigResponse2, DefaultError, Options<RenameConfigData>> => {
  const mutationOptions: UseMutationOptions<RenameConfigResponse2, DefaultError, Options<RenameConfigData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await renameConfig({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteConfigQueryKey = (options: Options<DeleteConfigData>) => createQueryKey("deleteConfig", options);

/**
 * Deletes a configuration
 * Deletes a configuration permanently.
 */
export const deleteConfigOptions = (options: Options<DeleteConfigData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await deleteConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: deleteConfigQueryKey(options),
  });
};

/**
 * Deletes a configuration
 * Deletes a configuration permanently.
 */
export const deleteConfigMutation = (
  options?: Partial<Options<DeleteConfigData>>,
): UseMutationOptions<DeleteConfigResponse2, DefaultError, Options<DeleteConfigData>> => {
  const mutationOptions: UseMutationOptions<DeleteConfigResponse2, DefaultError, Options<DeleteConfigData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteConfig({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const duplicateConfigQueryKey = (options: Options<DuplicateConfigData>) => createQueryKey("duplicateConfig", options);

/**
 * Duplicates a configuration
 * Duplicates a configuration. The category tree is duplicated, a new name is generated and returned in the response.
 *
 */
export const duplicateConfigOptions = (options: Options<DuplicateConfigData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await duplicateConfig({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: duplicateConfigQueryKey(options),
  });
};

/**
 * Duplicates a configuration
 * Duplicates a configuration. The category tree is duplicated, a new name is generated and returned in the response.
 *
 */
export const duplicateConfigMutation = (
  options?: Partial<Options<DuplicateConfigData>>,
): UseMutationOptions<DuplicateConfigResponse2, DefaultError, Options<DuplicateConfigData>> => {
  const mutationOptions: UseMutationOptions<DuplicateConfigResponse2, DefaultError, Options<DuplicateConfigData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await duplicateConfig({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const assignBooksQueryKey = (options: Options<AssignBooksData>) => createQueryKey("assignBooks", options);

/**
 * Assigns a config to books
 */
export const assignBooksOptions = (options: Options<AssignBooksData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await assignBooks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: assignBooksQueryKey(options),
  });
};

/**
 * Assigns a config to books
 */
export const assignBooksMutation = (
  options?: Partial<Options<AssignBooksData>>,
): UseMutationOptions<AssignBooksResponse2, DefaultError, Options<AssignBooksData>> => {
  const mutationOptions: UseMutationOptions<AssignBooksResponse2, DefaultError, Options<AssignBooksData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await assignBooks({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
