// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as ClientOptions, type TDataShape, urlSearchParamsBodySerializer } from "./client";
import { client as _heyApiClient } from "./client.gen";
import type {
  AssignBooksData,
  AssignBooksResponses,
  CreateConfigData,
  CreateConfigResponses,
  CreateLeagueData,
  CreateLeagueResponses,
  DeleteConfigData,
  DeleteConfigResponses,
  DuplicateConfigData,
  DuplicateConfigResponses,
  LoginData,
  LoginResponses,
  LogoutData,
  LogoutResponses,
  RenameConfigData,
  RenameConfigResponses,
  UpdateConfigData,
  UpdateConfigResponses,
} from "./types.gen";

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Login a user into the sportsbook-content-configurations service
 * This method is used to login a user
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<LoginResponses, unknown, ThrowOnError>({
    ...urlSearchParamsBodySerializer,
    url: "/sccs/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options.headers,
    },
  });
};

/**
 * Logout a user from the sportsbook-content-configurations service
 * This method is used to logout a user
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<LogoutResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "SCS_SESSION_ID",
        type: "apiKey",
      },
    ],
    url: "/sccs/auth/logout",
    ...options,
  });
};

/**
 * Creates a league, and the corresponding real sport and region if not existent
 * This method is used to create a league
 */
export const createLeague = <ThrowOnError extends boolean = false>(options: Options<CreateLeagueData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreateLeagueResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "SCS_SESSION_ID",
        type: "apiKey",
      },
    ],
    url: "/sccs/catalog/entity/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Creates a new configuration
 */
export const createConfig = <ThrowOnError extends boolean = false>(options: Options<CreateConfigData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreateConfigResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "SCS_SESSION_ID",
        type: "apiKey",
      },
    ],
    url: "/sccs/config",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Updates a configuration
 */
export const updateConfig = <ThrowOnError extends boolean = false>(options: Options<UpdateConfigData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<UpdateConfigResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "SCS_SESSION_ID",
        type: "apiKey",
      },
    ],
    url: "/sccs/config/{uuid}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Renames a configuration
 * Rename, changes the configuration's name.
 */
export const renameConfig = <ThrowOnError extends boolean = false>(options: Options<RenameConfigData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<RenameConfigResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "SCS_SESSION_ID",
        type: "apiKey",
      },
    ],
    url: "/sccs/config/{uuid}/rename",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Deletes a configuration
 * Deletes a configuration permanently.
 */
export const deleteConfig = <ThrowOnError extends boolean = false>(options: Options<DeleteConfigData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<DeleteConfigResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "SCS_SESSION_ID",
        type: "apiKey",
      },
    ],
    url: "/sccs/config/{uuid}/delete",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Duplicates a configuration
 * Duplicates a configuration. The category tree is duplicated, a new name is generated and returned in the response.
 *
 */
export const duplicateConfig = <ThrowOnError extends boolean = false>(options: Options<DuplicateConfigData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<DuplicateConfigResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "SCS_SESSION_ID",
        type: "apiKey",
      },
    ],
    url: "/sccs/config/{uuid}/duplicate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Assigns a config to books
 */
export const assignBooks = <ThrowOnError extends boolean = false>(options: Options<AssignBooksData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<AssignBooksResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "SCS_SESSION_ID",
        type: "apiKey",
      },
    ],
    url: "/sccs/books/assign",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
